{
  "author": {
    "name": "Felix GeisendÃ¶rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "ar-drone",
  "description": "A node.js client for controlling Parrot AR Drone 2.0 quad-copters.",
  "version": "0.3.3",
  "homepage": "https://github.com/felixge/node-ar-drone",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-ar-drone.git"
  },
  "main": "./index",
  "scripts": {
    "pretest": "node_modules/jshint/bin/jshint -c .jshintrc examples/ lib/ test/ index.js",
    "test": "node test/run.js"
  },
  "dependencies": {
    "buffy": "0.0.4",
    "simple-debug": "~1.1.1"
  },
  "devDependencies": {
    "utest": "0.0.6",
    "urun": "0.0.6",
    "sinon": "1.4.2",
    "jshint": "2.3.0"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# ar-drone\r\n\r\n[![Build Status](https://secure.travis-ci.org/felixge/node-ar-drone.png)](http://travis-ci.org/felixge/node-ar-drone)\r\n\r\nAn implementation of the networking protocols used by the\r\n[Parrot AR Drone 2.0](http://ardrone2.parrot.com/). It appears that 1.0 drones are also [compatible](https://github.com/felixge/node-ar-drone/issues/11#issuecomment-9402270).\r\n\r\nInstall via Github to get the *latest* version:\r\n\r\n```bash\r\nnpm install git://github.com/felixge/node-ar-drone.git\r\n```\r\n\r\nOr, if you're fine with missing some cutting edge stuff, go for npm:\r\n\r\n```bash\r\nnpm install ar-drone\r\n```\r\n\r\n## Introduction\r\n\r\nThe AR Drone is an affordable, yet surprisingly capable quadcopter. The drone\r\nitself runs a proprietary firmware that can be controlled via WiFi using the official\r\nFreeFlight mobile app\r\n(available for [iOS](http://itunes.apple.com/us/app/freeflight/id373065271?mt=8) and [Android](https://play.google.com/store/apps/details?id=com.parrot.freeflight&hl=en)).\r\n\r\nUnlike the firmware, the client protocol is open, and Parrot publishes an [SDK](https://projects.ardrone.org/projects/show/ardrone-api)\r\n(signup required to download) including a good amount of documentation and C\r\ncode. Their target audience seems to be mobile developers who can use this\r\nSDK to create games and other apps for people to have more fun with their drones.\r\n\r\nHowever, the protocol can also be used to receive video and sensor data, enabling\r\ndevelopers to write autonomous programs for the upcoming robot revolution.\r\n\r\n## Status\r\n\r\nThis module is still under [heavy development](CONTRIBUTING.md), so please don't be surprised if\r\nyou find some functionality missing or undocumented.\r\n\r\nHowever, the documented parts are tested and should work well for most parts.\r\n\r\n## Client\r\n\r\nThis module exposes a high level Client API that tries to support all drone\r\nfeatures, while making them easy to use.\r\n\r\nThe best way to get started is to create a `repl.js` file like this:\r\n\r\n```js\r\nvar arDrone = require('ar-drone');\r\nvar client  = arDrone.createClient();\r\nclient.createRepl();\r\n```\r\n\r\nUsing this REPL, you should be able to have some fun:\r\n\r\n```js\r\n$ node repl.js\r\n// Make the drone takeoff\r\ndrone> takeoff()\r\ntrue\r\n// Wait for the drone to takeoff\r\ndrone> clockwise(0.5)\r\n0.5\r\n// Let the drone spin for a while\r\ndrone> land()\r\ntrue\r\n// Wait for the drone to land\r\n```\r\n\r\nNow you could write an autonomous program that does the same:\r\n\r\n```js\r\nvar arDrone = require('ar-drone');\r\nvar client  = arDrone.createClient();\r\n\r\nclient.takeoff();\r\n\r\nclient\r\n  .after(5000, function() {\r\n    this.clockwise(0.5);\r\n  })\r\n  .after(3000, function() {\r\n    this.stop();\r\n    this.land();\r\n  });\r\n```\r\n\r\nOk, but what if you want to make your drone to interact with something? Well,\r\nyou could start by looking at the sensor data:\r\n\r\n```js\r\nclient.on('navdata', console.log);\r\n```\r\n\r\nNot all of this is handled by the Client library yet, but you should at the\r\nvery least be able to receive `droneState` and `demo` data.\r\n\r\nA good initial challenge might be to try flying to a certain altitude based\r\non the `navdata.demo.altitudeMeters` property.\r\n\r\nOnce you have managed this, you may want to try looking at the camera image. Here\r\nis a simple way to get this as PngBuffers (requires a recent ffmpeg version to\r\nbe found in your `$PATH`):\r\n\r\n```js\r\nvar pngStream = client.getPngStream();\r\npngStream.on('data', console.log);\r\n```\r\n\r\nYour first challenge might be to expose these png images as a node http web\r\nserver. Once you have done that, you should try feeding them into the\r\n[opencv](https://npmjs.org/package/opencv) module.\r\n\r\n### Client API\r\n\r\n#### arDrone.createClient([options])\r\n\r\nReturns a new `Client` object. `options` include:\r\n\r\n* `ip`: The IP of the drone. Defaults to `'192.168.1.1'`.\r\n* `frameRate`: The frame rate of the PngEncoder. Defaults to `5`.\r\n* `imageSize`: The image size produced by PngEncoder. Defaults to `null`.\r\n\r\n#### client.createREPL()\r\n\r\nLaunches an interactive interface with all client methods available in the\r\nactive scope. Additionally `client` resolves to the `client` instance itself.\r\n\r\n#### client.getPngStream()\r\n\r\nReturns a `PngEncoder` object that emits individual png image buffers as `'data'`\r\nevents. Multiple calls to this method returns the same object. Connection lifecycle\r\n(e.g. reconnect on error) is managed by the client.\r\n\r\n#### client.getVideoStream()\r\n\r\nReturns a `TcpVideoStream` object that emits raw tcp packets as `'data'`\r\nevents. Multiple calls to this method returns the same object. Connection lifecycle\r\n(e.g. reconnect on error) is managed by the client.\r\n\r\n#### client.takeoff(callback)\r\n\r\nSets the internal `fly` state to `true`, `callback` is invoked after the drone\r\nreports that it is hovering.\r\n\r\n#### client.land(callback)\r\n\r\nSets the internal `fly` state to `false`, `callback` is invoked after the drone\r\nreports it has landed.\r\n\r\n#### client.up(speed) / client.down(speed)\r\n\r\nMakes the drone gain or reduce altitude. `speed` can be a value from `0` to `1`.\r\n\r\n#### client.clockwise(speed) / client.counterClockwise(speed)\r\n\r\nCauses the drone to spin. `speed` can be a value from `0` to `1`.\r\n\r\n#### client.front(speed) / client.back(speed)\r\n\r\nControls the pitch, which a horizontal movement using the camera\r\nas a reference point.  `speed` can be a value from `0` to `1`.\r\n\r\n#### client.left(speed) / client.right(speed)\r\n\r\nControls the roll, which is a horizontal movement using the camera\r\nas a reference point.  `speed` can be a value from `0` to `1`.\r\n\r\n#### client.stop()\r\n\r\nSets all drone movement commands to `0`, making it effectively hover in place.\r\n\r\n#### client.calibrate(device_num)\r\n\r\nAsks the drone to calibrate a device.  Currently the AR.Drone firmware\r\nsupports only one device that can be calibrated: the magnetometer,\r\nwhich is device number 0.\r\n\r\nThe magnetometer can only be calibrated while the drone is flying, and\r\nthe calibration routine causes the drone to yaw in place a full 360\r\ndegrees.\r\n\r\n#### client.config(key, value, callback)\r\n\r\nSends a config command to the drone. You will need to download the drone\r\n[SDK](https://projects.ardrone.org/projects/show/ardrone-api) to find a full list of commands in the `ARDrone_Developer_Guide.pdf`.\r\n\r\nFor example, this command can be used to instruct the drone to send all navdata.\r\n\r\n```js\r\nclient.config('general:navdata_demo', 'FALSE');\r\n```\r\n\r\n`callback` is invoked after the drone acknowledges the config request\r\nor if a timeout occurs.\r\n\r\nAlternatively, you can pass an options object containing the following:\r\n\r\n* `key`: The config key to set.\r\n* `value`: The config value to set.\r\n* `timeout`: The time, in milliseconds, to wait for an ACK from the drone.\r\n\r\nFor example:\r\n\r\n```\r\nvar callback = function(err) { if (err) console.log(err); };\r\nclient.config({ key: 'general:navdata_demo', value: 'FALSE', timeout: 1000 }, callback);\r\n```\r\n\r\n#### client.animate(animation, duration)\r\n\r\nPerforms a pre-programmed flight sequence for a given `duration` (in ms).\r\n`animation` can be one of the following:\r\n\r\n\r\n```js\r\n['phiM30Deg', 'phi30Deg', 'thetaM30Deg', 'theta30Deg', 'theta20degYaw200deg',\r\n'theta20degYawM200deg', 'turnaround', 'turnaroundGodown', 'yawShake',\r\n'yawDance', 'phiDance', 'thetaDance', 'vzDance', 'wave', 'phiThetaMixed',\r\n'doublePhiThetaMixed', 'flipAhead', 'flipBehind', 'flipLeft', 'flipRight']\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nclient.animate('flipLeft', 1000);\r\n```\r\n\r\nPlease note that the drone will need a good amount of altitude and headroom\r\nto perform a flip. So be careful!\r\n\r\n#### client.animateLeds(animation, hz, duration)\r\n\r\nPerforms a pre-programmed led sequence at given `hz` frequency and `duration`\r\n(in sec!). `animation` can be one of the following:\r\n\r\n```js\r\n['blinkGreenRed', 'blinkGreen', 'blinkRed', 'blinkOrange', 'snakeGreenRed',\r\n'fire', 'standard', 'red', 'green', 'redSnake', 'blank', 'rightMissile',\r\n'leftMissile', 'doubleMissile', 'frontLeftGreenOthersRed',\r\n'frontRightGreenOthersRed', 'rearRightGreenOthersRed',\r\n'rearLeftGreenOthersRed', 'leftGreenRightRed', 'leftRedRightGreen',\r\n'blinkStandard']\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nclient.animateLeds('blinkRed', 5, 2)\r\n```\r\n\r\n#### client.disableEmergency()\r\n\r\nCauses the emergency REF bit to be set to 1 until\r\n`navdata.droneState.emergencyLanding` is 0. This recovers a drone that has\r\nflipped over and is showing red lights to be flyable again and show green\r\nlights.  It is also done implicitly when creating a new high level client.\r\n\r\n#### Events\r\n\r\nA client will emit landed, hovering, flying, landing, batteryChange, and altitudeChange events as long as demo navdata is enabled.\r\n\r\nTo enable demo navdata use\r\n\r\n```js\r\nclient.config('general:navdata_demo', 'FALSE');\r\n```\r\n\r\n## UdpControl\r\n\r\nThis is a low level API. If you prefer something simpler, check out the Client\r\ndocs.\r\n\r\nThe drone is controlled by sending UDP packets on port 5556. Because UDP\r\ndoes not guarantee message ordering or delivery, clients must repeatedly send\r\ntheir instructions and include an incrementing sequence number with each\r\ncommand.\r\n\r\nFor example, the command used for takeoff/landing (REF), with a sequence number\r\nof 1, and a parameter of 512 (takeoff) looks like this:\r\n\r\n```\r\nAT*REF=1,512\\r\r\n```\r\n\r\nTo ease the creation and sending of these packets, this module exposes an\r\n`UdpControl` class handling this task. For example, the following program will\r\ncause your drone to takeoff and hover in place.\r\n\r\n```js\r\nvar arDrone = require('ar-drone');\r\nvar control = arDrone.createUdpControl();\r\n\r\nsetInterval(function() {\r\n  // The emergency: true option recovers your drone from emergency mode that can\r\n  // be caused by flipping it upside down or the drone crashing into something.\r\n  // In a real program you probably only want to send emergency: true for one\r\n  // second in the beginning, otherwise your drone may attempt to takeoff again\r\n  // after a crash.\r\n  control.ref({fly: true, emergency: true});\r\n  // This command makes sure your drone hovers in place and does not drift.\r\n  control.pcmd();\r\n  // This causes the actual udp message to be send (multiple commands are\r\n  // combined into one message)\r\n  control.flush();\r\n}, 30);\r\n```\r\n\r\nNow that you are airborne, you can fly around by passing an argument to the\r\n`pcmd()` method:\r\n\r\n```js\r\ncontrol.pcmd({\r\n  front: 0.5, // fly forward with 50% speed\r\n  up: 0.3, // and also fly up with 30% speed\r\n});\r\n```\r\n\r\nThat's it! A full list of all `pcmd()` options can be found in the API docs\r\nbelow.\r\n\r\nWith what you have learned so far, you could create a simple program\r\nlike this:\r\n\r\n```js\r\nvar arDrone = require('ar-drone');\r\nvar control = arDrone.createUdpControl();\r\nvar start   = Date.now();\r\n\r\nvar ref  = {};\r\nvar pcmd = {};\r\n\r\nconsole.log('Recovering from emergency mode if there was one ...');\r\nref.emergency = true;\r\nsetTimeout(function() {\r\n  console.log('Takeoff ...');\r\n\r\n  ref.emergency = false;\r\n  ref.fly       = true;\r\n\r\n}, 1000);\r\n\r\nsetTimeout(function() {\r\n  console.log('Turning clockwise ...');\r\n\r\n  pcmd.clockwise = 0.5;\r\n}, 6000);\r\n\r\nsetTimeout(function() {\r\n  console.log('Landing ...');\r\n\r\n  ref.fly = false;\r\n  pcmd = {};\r\n}, 8000);\r\n\r\n\r\nsetInterval(function() {\r\n  control.ref(ref);\r\n  control.pcmd(pcmd);\r\n  control.flush();\r\n}, 30);\r\n```\r\n\r\n### UdpControl API\r\n\r\n#### arDrone.createUdpControl([options]) / new arDrone.UdpControl([options])\r\n\r\nCreates a new UdpControl instance where `options` can include:\r\n\r\n* `ip`: The drone IP address, defaults to `'192.168.1.1'`.\r\n* `port`: The port to use, defaults to `5556`.\r\n\r\n#### udpControl.raw(command, [arg1, arg2, ...])\r\n\r\nEnqueues a raw `AT*` command. This is useful if you want full control.\r\n\r\nFor example, a takeoff instructions be send like this:\r\n\r\n```js\r\nudpControl.raw('REF', (1 << 9));\r\n```\r\n\r\n#### udpControl.ref([options])\r\n\r\nEnqueues a `AT*REF` command, options are:\r\n\r\n* `fly`: Set this to `true` for takeoff / staying in air, or `false` to initiate\r\n  landing / stay on the ground. Defaults to `false`.\r\n* `emergency`: Set this to `true` to set the emergency bit, or `false` to not\r\n  set it. Details on this can be found in the official SDK Guide. Defaults to\r\n  `false`.\r\n\r\n#### udpControl.pcmd([options])\r\n\r\nEnqueues a `AT*PCMD` (progressive) command, options are:\r\n\r\n* `front` or `back`: Fly towards or away from front camera direction.\r\n* `left` or/ `right`: Fly towards the left or right of the front camera.\r\n* `up` or `down`: Gain or reduce altitude.\r\n* `clockwise` or `counterClockwise`: Rotate around the center axis.\r\n\r\nThe values for each option are the speed to use for the operation and can range\r\nfrom 0 to 1. You can also use negative values like `{front: -0.5}`, which is\r\nthe same as `{back: 0.5}`.\r\n\r\n#### udpControl.flush()\r\n\r\nSends all enqueued commands as an UDP packet to the drone.\r\n\r\n## Video\r\n\r\n@TODO Document the low level video API.\r\n\r\n## Navdata\r\n\r\n@TODO Document the low level navdata API.\r\n\r\n## Environment variables\r\n\r\n* DEFAULT_DRONE_IP\r\n\r\n## Camera access\r\n\r\nYou can access the head camera and the bottom camera, you just have to change\r\nthe config:\r\n\r\n```javascript\r\n// access the head camera\r\nclient.config('video:video_channel', 0);\r\n\r\n// access the bottom camera\r\nclient.config('video:video_channel', 3);\r\n```\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/felixge/node-ar-drone/issues"
  },
  "_id": "ar-drone@0.3.3",
  "_shasum": "4a0d1465bf93571c2524bd70b8f2a8e772762beb",
  "_resolved": "git://github.com/felixge/node-ar-drone.git#228bd4573e765bed3861f259ce7e66fcace15f43",
  "_from": "git://github.com/felixge/node-ar-drone.git"
}
